{"version":3,"sources":["../../app-src/util/ConnectionFatory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","warn","error","name","forEach","store","objectStoreNames","contains","deleteObjecStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA;;AAEA,kBAAMA,SAAS,CAAC,aAAD,CAAf,C,CAAgC;AAChC,gBAAIC,aAAa,IAAjB,C,CAAsB;AACtB,gBAAIC,QAAQ,IAAZ,C,CAAiB;;AAEV,kBAAMC,iBAAN,CAAuB;;AAE1BC,8BAAa;AACT,0BAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH;;AAED,uBAAOC,aAAP,GAAsB;AAClB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,4BAAGR,UAAH,EAAe,OAAOO,QAAQP,UAAR,CAAP;;AAEf,8BAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,oCAAYG,eAAZ,GAA8BC,KAAK;AAC/BX,8CAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,yBAFD;;AAIAP,oCAAYQ,SAAZ,GAAwBJ,KAAK;AACzBb,yCAAaa,EAAEE,MAAF,CAASC,MAAtB;AACAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR,CAFyB,CAEiB;AAC1CA,uCAAWC,KAAX,GAAmB,MAAM;AACrB,sCAAM,IAAIG,KAAJ,CAAU,+CAAV,CAAN;AACH,6BAFD;AAGAG,oCAAQM,EAAEE,MAAF,CAASC,MAAjB;AACH,yBAPD;AAQAP,oCAAYU,OAAZ,GAAsBN,KAAK;AACvBO,oCAAQC,IAAR,CAAaR,EAAEE,MAAF,CAASO,KAAtB;AACAd,mCAAOK,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,yBAHD;AAIH,qBAtBM,CAAP;AAuBH;;AAED;AACA,uBAAOT,aAAP,CAAqBd,UAArB,EAAgC;AAC5BD,2BAAOyB,OAAP,CAAeC,SAAS;AACpB,4BAAGzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACIzB,WAAW4B,gBAAX,CAA4BH,KAA5B;;AAEJzB,mCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,qBALD;AAMH;;AAED,uBAAOC,eAAP,GAAwB;AACpB,wBAAG/B,UAAH,EAAc;AACVC,gCADU,CACF;AACX;AACJ;AA9CyB","file":"ConnectionFatory.js","sourcesContent":["//const ConnectionFactory = ( () => { IIFE REMOVIDO DEVIDO USO DE MÓDULOS\r\n\r\nconst stores = ['negociacoes']  //armazena as stores disponíveis no indexedDB 'jscangaceiro'\r\nlet connection = null //receberá a conexão para garantir que haja uma única conexão com o indexedDB\r\nlet close = null //receberá a referência original do método close() da conexão\r\n\r\nexport class ConnectionFactory{\r\n\r\n    constructor(){\r\n        throw new Error('Não é possivel instâncias desta classe')\r\n    }\r\n\r\n    static getConnection(){\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            if(connection) return resolve(connection)  \r\n\r\n            const openRequest = indexedDB.open('jscangaceiro', 2)\r\n            \r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStores(e.target.result)\r\n            }\r\n\r\n            openRequest.onsuccess = e => {\r\n                connection = e.target.result\r\n                close = connection.close.bind(connection) //referência original de close é atribuida à variável\r\n                connection.close = () => {\r\n                    throw new Error('A conexão não pode ser encerrada diretamente!')\r\n                }\r\n                resolve(e.target.result)\r\n            }\r\n            openRequest.onerror = e => {\r\n                console.warn(e.target.error)\r\n                reject(e.target.error.name)\r\n            }\r\n        })\r\n    }\r\n\r\n    //_createStores é um método privado e por convenção só faz sentido ser chamado pela própria classe\r\n    static _createStores(connection){\r\n        stores.forEach(store => {\r\n            if(connection.objectStoreNames.contains(store))\r\n                connection.deleteObjecStore(store)\r\n            \r\n            connection.createObjectStore(store, { autoIncrement: true })\r\n        })\r\n    }\r\n\r\n    static closeConnection(){\r\n        if(connection){\r\n            close() //chama o close original atribuido na variável \r\n        }\r\n    }\r\n}"]}