{"version":3,"sources":["../../../app-src/util/decorators/Controller.js"],"names":["controller","seletores","elements","map","seletor","document","querySelector","constructor","constructorOriginal","constructorNovo","instance","Object","getOwnPropertyNames","prototype","forEach","property","Reflect","hasMetadata","associaEvento","getMetadata","metadado","selector","addEventListener","event","prevent","preventDefault","propertyKey"],"mappings":";;;AAAO,aAASA,UAAT,CAAoB,GAAGC,SAAvB,EAAiC;;AAEpC;AACA,cAAOC,WAAWD,UAAUE,GAAV,CAAcC,WACxBC,SAASC,aAAT,CAAuBF,OAAvB,CADU,CAAlB;;AAGA,eAAO,UAASG,WAAT,EAAqB;AACxB,kBAAMC,sBAAsBD,WAA5B;;AAEA,kBAAME,kBAAkB,YAAU;AAC9B;AACA;;AAEA,sBAAMC,WAAW,IAAIF,mBAAJ,CAAwB,GAAGN,QAA3B,CAAjB;AACA;AACAS,uBACKC,mBADL,CACyBJ,oBAAoBK,SAD7C,EAEKC,OAFL,CAEaC,YAAY;AACjB,wBAAGC,QAAQC,WAAR,CAAoB,WAApB,EAAiCP,QAAjC,EAA2CK,QAA3C,CAAH,EAAwD;AACpD;AACAG,sCAAcR,QAAd,EAAwBM,QAAQG,WAAR,CAAoB,WAApB,EAAiCT,QAAjC,EAA2CK,QAA3C,CAAxB;AAEH;AACJ,iBARL;AASH,aAfD;;AAiBA;AACAN,4BAAgBI,SAAhB,GAA4BL,oBAAoBK,SAAhD;;AAEA,mBAAOJ,eAAP;AACH,SAxBD;AAyBH;;0BA/BeT,U;;AAiChB,aAASkB,aAAT,CAAuBR,QAAvB,EAAiCU,QAAjC,EAA0C;AACtCf,iBACKC,aADL,CACmBc,SAASC,QAD5B,EAEKC,gBAFL,CAEsBF,SAASG,KAF/B,EAEsCA,SAAS;AACvC,gBAAGH,SAASI,OAAZ,EAAqBD,MAAME,cAAN;AACrBf,qBAASU,SAASM,WAAlB,EAA+BH,KAA/B;AACH,SALL;AAMH","file":"Controller.js","sourcesContent":["export function controller(...seletores){\r\n    \r\n    //lista com elementos da DOM\r\n    const  elements = seletores.map(seletor => \r\n            document.querySelector(seletor))\r\n    \r\n    return function(constructor){\r\n        const constructorOriginal = constructor\r\n\r\n        const constructorNovo = function(){\r\n            //usamos function() para definir (e não => pois precisamos que o this do constructor seja dinâmico)\r\n            //constructorNovo deverá chamar constructorOriginal passando os parâmetros necessários\r\n            \r\n            const instance = new constructorOriginal(...elements)\r\n            //Object varre cada propriedade da da classe\r\n            Object\r\n                .getOwnPropertyNames(constructorOriginal.prototype)\r\n                .forEach(property => {\r\n                    if(Reflect.hasMetadata('bindEvent', instance, property)){\r\n                        //precisa fazer a associação do evento\r\n                        associaEvento(instance, Reflect.getMetadata('bindEvent', instance, property))\r\n\r\n                    }\r\n                })\r\n        }\r\n\r\n        //o novo constructor deve ter o mesmo prototype do original. Isso é importante pois podemos estar lidando com uma classe herdada\r\n        constructorNovo.prototype = constructorOriginal.prototype\r\n\r\n        return constructorNovo\r\n    }\r\n}\r\n\r\nfunction associaEvento(instance, metadado){\r\n    document\r\n        .querySelector(metadado.selector)\r\n        .addEventListener(metadado.event, event => {\r\n            if(metadado.prevent) event.preventDefault()\r\n            instance[metadado.propertyKey](event)\r\n        })\r\n}"]}